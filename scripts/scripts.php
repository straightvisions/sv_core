<?php
namespace sv_core;

class scripts extends sv_abstract {
	private static $scripts						= array();

	// properties
	private $ID									= false;
	private $type								= 'css';
	private $script_url							= '';
	private $script_path						= '';
	private $deps								= array();
	private $no_prefix							= false;
	private static $is_loaded					= array(
		'css'									=> array(),
		'js'									=> array()
	);
	private $is_backend                         = false;
	private $is_external						= false;

	// CSS specific
	private $media								= 'all';
	private $inline								= false;

	public function __construct() {
		add_action( 'wp_footer', array( $this, 'wp_footer' ), 1 );
		add_action( 'admin_enqueue_scripts', array( $this, 'wp_footer' ), 1 );
	}

	public function get_scripts(): array {
		return self::$scripts;
	}

	public function wp_footer() {
		foreach ( $this->get_scripts() as $script ) {
			if ( is_admin() ) {
				if ( $script->get_is_backend() ) {
					$this->add_script( $script );
				}
			} elseif ( ! $script->get_is_backend() ) {
				$this->add_script( $script );
			}
		}
	}

	public function add_script( scripts $script ) {
		if ( ! $script->get_is_loaded() ) {
			$script->set_is_loaded();
			switch ( $script->get_type() ) {
				case 'css':
					if ( $script->get_inline() ) {
						echo '<style data-sv_100_module="' . $script->get_handle() . '">';
						require_once( $script->get_path() );
						echo '</style>';
					} else {
						wp_enqueue_style(
							$script->get_handle(),                          // script handle
							$script->get_url(),                   			// script url
							$script->get_deps(),                            // script dependencies
							($this->is_external() ? md5($script->get_url()) : filemtime( $script->get_path() )),     // script version, generated by last filechange time
							$script->get_media()                            // The media for which this stylesheet has been defined. Accepts media types like 'all', 'print' and 'screen', or media queries like '(orientation: portrait)' and '(max-width: 640px)'.
						);
					}
					break;
				case 'js':
					wp_enqueue_script(
						$script->get_handle(),                              // script handle
						$script->get_url(),                     		  // script url
						$script->get_deps(),                                // script dependencies
						($this->is_external() ? md5($script->get_url()) : filemtime( $script->get_path() )),         // script version, generated by last filechange time
						true                                       // print in footer
					);
					break;
			}
		}
	}

	// OBJECT METHODS
	public static function create( $parent ) {
		$new									= new static();

		$new->prefix							= $parent->get_prefix() . '_';
		$new->set_root( $parent->get_root() );
		$new->set_parent( $parent );

		self::$scripts[]						= $new;

		return $new;
	}

	public function set_no_prefix( bool $no_prefix ): scripts {
		$this->no_prefix						= $no_prefix;

		return $this;
	}

	public function get_no_prefix(): bool {
		return $this->no_prefix;
	}

	public function get_handle(): string {
		if ( $this->get_no_prefix() ) {
			return $this->get_ID();
		} else {
			return $this->get_prefix( $this->get_ID() );
		}
	}

	public function set_ID( string $ID ): scripts {
		$this->ID								= $ID;

		return $this;
	}

	public function get_ID(): string {
		return $this->ID;
	}

	public function set_is_loaded(): scripts {
		static::$is_loaded[$this->get_type()][$this->get_handle()]	= true;

		return $this;
	}

	public function get_is_loaded(): bool {
		return isset(static::$is_loaded[$this->get_type()][$this->get_handle()]);
	}

	public function set_type( string $type ): scripts {
		$this->type								= $type;

		return $this;
	}

	public function get_type(): string {
		return $this->type;
	}

	public function set_is_backend(): scripts {
		$this->is_backend						= true;

		return $this;
	}

	public function get_is_backend(): bool {
		return $this->is_backend;
	}
	
	public function set_path(string $path, bool $absolute_url = false): scripts {
		if($absolute_url){
			$this->script_url					= $path;
			$this->is_external					= true;
		}else {
			$this->script_url  = $this->get_parent()->get_url($path);
			$this->script_path = $this->get_parent()->get_path($path);
		}
		
		return $this;
	}
	public function get_path(): array {
		return $this->script_path;
	}
	public function get_url(): array {
		return $this->script_url;
	}
	public function is_external(): bool{
		return $this->is_external;
	}

	public function set_deps( array $deps ): scripts {
		$this->deps								= $deps;

		return $this;
	}

	public function get_deps(): array {
		return $this->deps;
	}

	// CSS specific
	public function set_media( string $media ): scripts{
		$this->media							= $media;

		return $this;
	}

	public function get_media(): string {
		return $this->media;
	}

	public function set_inline( bool $inline ): scripts {
		$this->inline							= $inline;

		return $this;
	}

	public function get_inline(): bool {
		return $this->inline;
	}
}