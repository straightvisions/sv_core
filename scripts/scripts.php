<?php
	
	namespace sv_core;
	
	class scripts extends sv_abstract{
		private static $scripts						= array();
		
		// properties
		private $ID									= false;
		private $type								= 'css';
		private $script_url							= '';
		private $script_path						= '';
		private $deps								= array();
		private $no_prefix							= false;
		
		// CSS specific
		private $media								= 'all';
		private $inline								= false;
		
		/**
		 * @desc			initialize
		 * @author			Matthias Bathke
		 * @since			1.0
		 * @ignore
		 */
		public function __construct(){
			add_action('wp_footer', array($this,'wp_footer'), 1);
		}
		public function get_scripts(): array{
			return self::$scripts;
		}
		public function wp_footer(){
			foreach($this->get_scripts() as $script){
				switch ($script->get_type()) {
					case 'css':
						if($this->get_inline()){
							echo '<style data-sv_100_module="'.$script->get_handle().'">';
							require_once($script->get_source()['path']);
							echo '</style>';
						}else {
							wp_enqueue_style(
								$script->get_handle(),        // script handle
								$script->get_source()['url'],                // script url
								$script->get_deps(),                        // script dependencies
								filemtime( $script->get_source()['path'] ),    // script version, generated by last filechange time
								$script->get_media()                        // The media for which this stylesheet has been defined. Accepts media types like 'all', 'print' and 'screen', or media queries like '(orientation: portrait)' and '(max-width: 640px)'.
							);
						}
						break;
					case 'js':
						wp_enqueue_script(
							$script->get_handle(),		// script handle
							$script->get_source()['url'],				// script url
							$script->get_deps(),						// script dependencies
							filemtime($script->get_source()['path']),	// script version, generated by last filechange time
							true							// print in footer
						);
						break;
				}
			}
		}
		// OBJECT METHODS
		public static function create($parent){
			$new									= new static();
			
			$new->prefix							= $parent->get_prefix().'_';
			$new->set_root($parent->get_root());
			$new->set_parent($parent);
			
			self::$scripts[]						= $new;
			
			return $new;
		}
		public function set_no_prefix(bool $no_prefix): scripts{
			$this->no_prefix						= $no_prefix;
			
			return $this;
		}
		public function get_no_prefix(): bool{
			return $this->no_prefix;
		}
		public function get_handle(): string{
			if($this->get_no_prefix()){
				return $this->get_ID();
			}else{
				return $this->get_prefix($this->get_ID());
			}
		}
		public function set_ID(string $ID): scripts{
			$this->ID								= $ID;

			return $this;
		}
		public function get_ID(): string{
			return $this->ID;
		}
		public function set_type(string $type): scripts{
			$this->type								= $type;
			
			return $this;
		}
		public function get_type(): string{
			return $this->type;
		}
		public function set_source(string $url, string $path): scripts{
			$this->script_url								= $url;
			$this->script_path								= $path;
			
			return $this;
		}
		public function get_source(): array{
			return array('url' => $this->script_url, 'path' => $this->script_path);
		}
		public function set_deps(array $deps): scripts{
			$this->deps								= $deps;

			return $this;
		}
		public function get_deps(): array{
			return $this->deps;
		}
		
		// CSS specific
		public function set_media(string $media): scripts{
			$this->media							= $media;
			
			return $this;
		}
		public function get_media(): string{
			return $this->media;
		}
		public function set_inline(bool $inline): scripts{
			$this->inline							= $inline;
			
			return $this;
		}
		public function get_inline(): bool{
			return $this->inline;
		}
	}